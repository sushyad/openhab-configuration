import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.joda.time.*
import java.util.regex.Matcher
import java.util.regex.Pattern
import java.util.HashMap

var Timer tIndoorLights

/*
rule sendSwitchCommandOn
when 
    Item Switch4_button received command ON
then
    sendHttpPutRequest("http://192.168.0.108:8080/api/switches/4", "application/json", "{\"state\": \"ON\"}")
end

rule sendSwitchCommandOff
when 
    Item Switch4_button received command OFF
then
    sendHttpPutRequest("http://192.168.0.108:8080/api/switches/4", "application/json", "{\"state\": \"OFF\"}")
end
*/

rule sendProjectorCommandOn
when 
    Item Projector_button received command ON
then
    sendHttpPutRequest("http://192.168.0.108:8080/api/projector", "application/json", "{\"state\": \"ON\"}")
end

rule sendProjectorCommandOff
when 
    Item Projector_button received command OFF
then
    sendHttpPutRequest("http://192.168.0.108:8080/api/projector", "application/json", "{\"state\": \"OFF\"}")
end

rule "At sunset"
when 
//    Time cron "0 0 16 * * ?"   // Every day 16:00 hours, evaluate sunset
    Item sunsetTime received update
then
    var year   = now.getYear
    var month  = now.getMonthOfYear
    var day    = now.getDayOfMonth
    if (month < 10) month = '0' + month
    if (day < 10) day = '0' + day
    var datum  = year + "-" + month + "-" + day + " " + sunsetTime.state
    logInfo("Sunset", "datum = " + datum)
    var DateTime sunset = parse(year + "-" + month + "-" + day + "T" + sunsetTime.state)
    var DateTime sunrise = parse(year + "-" + month + "-" + day + "T" + sunriseTime.state)
    if (sunset.isAfterNow()) {
    /*
     * 2nd Foyer Light on Switch4
     */
     // Cancel timer to avoid reschedule
    if(tIndoorLights != null) {
        logInfo("Sunset", "Timer for '2nd Foyer Light' canceled") 
        tIndoorLights.cancel()
    }
    logInfo("Sunset", "Timer for '2nd Foyer Light' created") 
    var lengthOfDayInHrs = (sunset.getMinuteOfDay() - sunrise.getMinuteOfDay()) / 60
    logInfo("Sunset", "Length of day: " + lengthOfDayInHrs + " hrs")
    tIndoorLights = createTimer(sunset.minusMinutes(45 * (lengthOfDayInHrs / 9))) [|
        logInfo("Sunset", "Timer for '2nd Foyer Light' executed") 
/*        gSunset?.members.forEach(Switch|
                sendCommand(Switch4, ON)
        )
*/
        sendCommand(Switch2, ON)
        sendCommand(Switch3, ON)
        sendCommand(Switch4, ON)
    ]
    } else {
        logInfo("Sunset", "Ignoring this sunset update since sun has already set.") 
    }
end

rule "At midnight"
when 
    Time cron "0 0 0 * * ?"   // Every midnight
then
    sendCommand(Switch2, OFF)
    sendCommand(Switch3, OFF)
    sendCommand(Switch4, OFF)
end

rule "When thermostat status changes"
when 
    Item thermostatStatus received update
then
    logInfo("Thermostat", "Status update " + thermostatStatus.state.toString)
    var jsonPattern = Pattern::compile("\"(.+?)\":.\"(.+?)\"")
    var matcher = jsonPattern.matcher(thermostatStatus.state.toString)
    var thermostatVariableMap = new HashMap
    while (matcher.find) {
      var variableName = matcher.group(1)
      var variableValue = matcher.group(2)
      thermostatVariableMap.put(variableName, variableValue)
    }

    var variableId = thermostatVariableMap.get("service") + ":" + thermostatVariableMap.get("variable")
    thermostatVariableMap.put("variableId", variableId)
    if (variableId == "urn:upnp-org:serviceId:TemperatureSetpoint1_Cool:CurrentSetpoint") {
        postUpdate("thermostatColdSetpoint", thermostatVariableMap.get("newValue"))
    }

    logInfo("Thermostat",  "Status: " + thermostatVariableMap)
end

rule "When dryer status changes"
when
    Item dryer changed from ON to OFF
then
    logInfo("Dryer", "Status update " + dryer.state.toString)
    notifyMyAndroid('e5c06428e3792bfed6147a7928b9cdbc9762228cb6e64b93', 'Dryer', 'Dryer turned OFF', 1, '', false);
end

rule "When left garage door opens"
when
    Item garageDoorLeft changed from 0 to 1
then
    logInfo("GarageDoorLeft", "Status update " + garageDoorLeft.state.toString)
    notifyMyAndroid('e5c06428e3792bfed6147a7928b9cdbc9762228cb6e64b93', 'Garage Door - Blanca', 'Opened', 1, '', false);
end

rule "When left garage door closes"
when
    Item garageDoorLeft changed from 1 to 0
then
    logInfo("GarageDoorLeft", "Status update " + garageDoorLeft.state.toString)
    notifyMyAndroid('e5c06428e3792bfed6147a7928b9cdbc9762228cb6e64b93', 'Garage Door - Blanca', 'Closed', 1, '', false);
end

rule "When right garage door opens"
when
    Item garageDoorRight changed from 0 to 1
then
    logInfo("GarageDoorRight", "Status update " + garageDoorRight.state.toString)
    notifyMyAndroid('e5c06428e3792bfed6147a7928b9cdbc9762228cb6e64b93', 'Garage Door - Susheel', 'Opened', 1, '', false);
end

rule "When right garage door closes"
when
    Item garageDoorRight changed from 1 to 0
then
    logInfo("GarageDoorRight", "Status update " + garageDoorRight.state.toString)
    notifyMyAndroid('e5c06428e3792bfed6147a7928b9cdbc9762228cb6e64b93', 'Garage Door - Susheel', 'Closed', 1, '', false);
end

rule "When left garage door sensor is armed"
when
    Item garageDoorLeftArmed changed from 0 to 1
then
    logInfo("GarageDoorLeftArmed", "Status update " + garageDoorLeftArmed.state.toString)
    notifyMyAndroid('e5c06428e3792bfed6147a7928b9cdbc9762228cb6e64b93', 'Garage Door - Blanca', 'Armed', 1, '', false);
end

rule "When left garage door sensor is disabled"
when
    Item garageDoorLeftArmed changed from 1 to 0
then
    logInfo("GarageDoorLeftArmed", "Status update " + garageDoorLeftArmed.state.toString)
    notifyMyAndroid('e5c06428e3792bfed6147a7928b9cdbc9762228cb6e64b93', 'Garage Door - Blanca', 'Disabled', 1, '', false);
end

rule "When right garage door sensor is armed"
when
    Item garageDoorRightArmed changed from 0 to 1
then
    logInfo("GarageDoorRightArmed", "Status update " + garageDoorRightArmed.state.toString)
    notifyMyAndroid('e5c06428e3792bfed6147a7928b9cdbc9762228cb6e64b93', 'Garage Door - Susheel', 'Armed', 1, '', false);
end

rule "When right garage door sensor is disabled"
when
    Item garageDoorRightArmed changed from 1 to 0
then
    logInfo("GarageDoorRightArmed", "Status update " + garageDoorRightArmed.state.toString)
    notifyMyAndroid('e5c06428e3792bfed6147a7928b9cdbc9762228cb6e64b93', 'Garage Door - Susheel', 'Disabled', 1, '', false);
end

