import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.joda.time.*
import java.util.regex.Matcher
import java.util.regex.Pattern
import java.util.HashMap

var Timer tIndoorLights
var Timer timerGarageDoorLeft
var Timer timerGarageDoorRight
var Timer timerLivingRoomLights

rule sendSwitchCommandOn
when 
    Item Switch2 received command ON
then
end

rule sendSwitchCommandOff
when 
    Item Switch2 received command OFF
then
end

rule BlancaReachedHome
when
    Item PresenceBlanca_Home changed from OFF to ON
then
    logInfo("Presence", "Blanca about to reach home")

    if (phoneBlanca.state != ON)
    {
        sendCommand(Presence, ON)
        //squeezeboxSpeak("Office", "Blanca is about to reach home. Blanca is about to reach home.")
        //squeezeboxSpeak("LivingRoom", "Blanca is about to reach home. Blanca is about to reach home.")
    }
end

rule BlancaLeftHome
when
    Item PresenceBlanca_Home changed from ON to OFF
then
    logInfo("Presence", "Blanca left home")
    if (garageDoorLeft.state == ON) {
        notifyMyAndroid('CHANGE_ME', 'Garage Door - Blanca', 'Left open', 1, '', false)
        sendCommand(garageDoorLeft, OFF)
    }

    if(gPresenceHome.members.filter(s | s.state == ON).size == 0) {
        logInfo("PresenceCheck", "No phone within reach, checking for flapping")
        if(gPresenceHome.members.filter(s | s.changedSince(now.minusMinutes(5))).size == 0) {
            logInfo("PresenceCheck", "Nobody is at home")
            sendCommand(Presence, OFF)
        }
    }
end

rule SusheelReachedHome
when
    Item PresenceSusheel_Home changed from OFF to ON
then
    logInfo("Presence", "Susheel about to reach home")

    if (phoneSusheel.state != ON)
    {
        sendCommand(Presence, ON)
        //squeezeboxSpeak("Office", "Susheel is about to reach home. Susheel is about to reach home.")
        //squeezeboxSpeak("LivingRoom", "Susheel is about to reach home. Susheel is about to reach home.")
    }

end

rule SusheelLeftHome
when
    Item PresenceSusheel_Home changed from ON to OFF
then
    logInfo("Presence", "Susheel left home")
    if (garageDoorRight.state == ON) {
        notifyMyAndroid('CHANGE_ME', 'Garage Door - Susheel', 'Left open', 1, '', false)
        sendCommand(garageDoorRight, OFF)
    }

    if(gPresenceHome.members.filter(s | s.state == ON).size == 0) {
        logInfo("PresenceCheck", "No phone within reach, checking for flapping")
        if(gPresenceHome.members.filter(s | s.changedSince(now.minusMinutes(5))).size == 0) {
            logInfo("PresenceCheck", "Nobody is at home")
            sendCommand(Presence, OFF)
        }
    }
end

rule sendProjectorCommandOn
when 
    Item Projector_button received command ON
then
    sendHttpPutRequest("http://192.168.0.108:8080/api/projector", "application/json", "{\"state\": \"ON\"}")
end

rule sendProjectorCommandOff
when 
    Item Projector_button received command OFF
then
    sendHttpPutRequest("http://192.168.0.108:8080/api/projector", "application/json", "{\"state\": \"OFF\"}")
end

rule "At sunset"
when 
    Item sunsetTime received update
then
    var year   = now.getYear
    var month  = now.getMonthOfYear
    var day    = now.getDayOfMonth
    if (month < 10) month = '0' + month
    if (day < 10) day = '0' + day
    var datum  = year + "-" + month + "-" + day + " " + sunsetTime.state
    logInfo("Sunset", "datum = " + datum)
    var DateTime sunset = parse(year + "-" + month + "-" + day + "T" + sunsetTime.state)
    var DateTime sunrise = parse(year + "-" + month + "-" + day + "T" + sunriseTime.state)
    if (sunset.isAfterNow()) {
        postUpdate("isDark", "OFF")
    /*
     * 2nd Foyer Light on Switch4
     */
     // Cancel timer to avoid reschedule
    if(tIndoorLights != null) {
        logInfo("Sunset", "Timer for '2nd Foyer Light' canceled") 
        tIndoorLights.cancel()
    }
    logInfo("Sunset", "Timer for '2nd Foyer Light' created") 
    var lengthOfDayInHrs = (sunset.getMinuteOfDay() - sunrise.getMinuteOfDay()) / 60
    logInfo("Sunset", "Length of day: " + lengthOfDayInHrs + " hrs")
    tIndoorLights = createTimer(sunset.minusMinutes(45 * (lengthOfDayInHrs / 9))) [|
        logInfo("Sunset", "Timer for '2nd Foyer Light' executed") 
/*        gSunset?.members.forEach(Switch|
                sendCommand(Switch4, ON)
        )
*/
        sendCommand(Switch2, ON)
        sendCommand(Switch3, ON)
        sendCommand(Switch4, ON)
        sendCommand(Wifi_Switch_1, ON)
    ]
    } else {
        postUpdate("isDark", "ON")
        logInfo("Sunset", "Ignoring this sunset update since sun has already set.") 
    }
end

rule "At midnight"
when 
    Time cron "0 0 0 * * ?"   // Every midnight
then
    sendCommand(Switch2, OFF)
    sendCommand(Switch3, OFF)
    sendCommand(Switch4, OFF)
    sendCommand(Wifi_Switch_1, OFF)
end

rule "When thermostat status changes"
when 
    Item thermostatStatus received update
then
    logInfo("Thermostat", "Status update " + thermostatStatus.state.toString)
    var jsonPattern = Pattern::compile("\"(.+?)\":.\"(.+?)\"")
    var matcher = jsonPattern.matcher(thermostatStatus.state.toString)
    var thermostatVariableMap = new HashMap
    while (matcher.find) {
          var variableName = matcher.group(1)
          var variableValue = matcher.group(2)
          thermostatVariableMap.put(variableName, variableValue)
    }

    var variableId = thermostatVariableMap.get("service") + ":" + thermostatVariableMap.get("variable")
    thermostatVariableMap.put("variableId", variableId)
    if (variableId == "urn:upnp-org:serviceId:TemperatureSetpoint1_Cool:CurrentSetpoint") {
        postUpdate("thermostatColdSetpoint", thermostatVariableMap.get("newValue"))
    }

    logInfo("Thermostat",  "Status: " + thermostatVariableMap)
end

rule "When dryer status changes"
when
    Item dryer changed from ON to OFF
then
    logInfo("Dryer", "Status update " + dryer.state.toString)
    //squeezeboxSpeak("Office", "The dryer has finished. The dryer has finished. The dryer has finished. The dryer has finished")
    //squeezeboxSpeak("LivingRoom", "The dryer has finished. The dryer has finished. The dryer has finished. The dryer has finished")
    notifyMyAndroid('CHANGE_ME', 'Dryer', 'Dryer turned OFF', 1, '', false)
end

rule "When left garage door opens"
when
    Item garageDoorLeft changed from OFF to ON
then
    logInfo("GarageDoorLeft", "Opened")
    notifyMyAndroid('CHANGE_ME', 'Garage Door - Blanca', 'Opened', 1, '', false)
    //squeezeboxSpeak("LivingRoom", "Left garage door opened. Left garage door opened.")
    //squeezeboxSpeak("Office", "Left garage door opened. Left garage door opened.")

     // Cancel active timer on this garage door to avoid accidental closure
    if(timerGarageDoorLeft != null) {
        logInfo("Garage Door - Blanca", "Timer for 'Garage Door - Blanca' canceled")
        timerGarageDoorLeft.cancel()
    }

    timerGarageDoorLeft = createTimer(now.plusMinutes(5)) [|
        if (manualOverrideGarage.state != ON && garageDoorLeft.state == ON) {
            logInfo("Garage Door - Blanca", "Left Open")
            notifyMyAndroid('CHANGE_ME', 'Garage Door - Blanca', 'Left open', 1, '', false)
            //squeezeboxSpeak("LivingRoom", "Blanca left garage door open. Blanca left garage door open.")
            //squeezeboxSpeak("Office", "Blanca left garage door open. Blanca left garage door open.")
            sendMail('abc@def.org', 'Blanca left the garage door open', '')
            sendMail('def@abc.org', 'Blanca left the garage door open', '')
            sendCommand(garageDoorLeft, OFF)
            sendMail('abc@def.org', 'Closed the right garage door', '')
            sendMail('def@abc.org', 'Closed the right garage door', '')
        }
    ]

end

rule "When left garage door closes"
when
    Item garageDoorLeft changed from ON to OFF
then
    logInfo("GarageDoorLeft", "Closed")
    //squeezeboxSpeak('LivingRoom', 'Left garage door closed')
    notifyMyAndroid('CHANGE_ME', 'Garage Door - Blanca', 'Closed', 1, '', false)
end

rule "When right garage door opens"
when
    Item garageDoorRight changed from OFF to ON
then
    logInfo("GarageDoorRight", "Opened")
    notifyMyAndroid('CHANGE_ME', 'Garage Door - Susheel', 'Opened', 1, '', false)
    //squeezeboxSpeak("LivingRoom", "Right garage door opened. Right garage door opened.")
    //squeezeboxSpeak("Office", "Right garage door opened. Right garage door opened.")

    if(timerGarageDoorRight != null) {
        logInfo("Garage Door - Susheel", "Timer for 'Garage Door - Susheel' canceled")
        timerGarageDoorRight.cancel()
    }

    timerGarageDoorRight = createTimer(now.plusMinutes(5)) [|
        if (manualOverrideGarage.state != ON && garageDoorRight.state == ON) {
            logInfo("Garage Door - Susheel", "Left Open")
            notifyMyAndroid('CHANGE_ME', 'Garage Door - Susheel', 'Left open', 1, '', false)
            //squeezeboxSpeak("LivingRoom", "Susheel left garage door open. Susheel left garage door open.")
            //squeezeboxSpeak("Office", "Susheel left garage door open. Susheel left garage door open.")
            sendMail('abc@def.org', 'Susheel left the garage door open', '')
            sendMail('def@abc.org', 'Susheel left the garage door open', '')
            sendCommand(garageDoorRight, OFF)
            sendMail('abc@def.org', 'Closed the left garage door', '')
            sendMail('def@abc.org', 'Closed the left garage door', '')
        }
    ]
end


rule "When manual override for garage door is engaged"
when
    Item manualOverrideGarage received command ON
then

    if(timerGarageDoorLeft != null) {
        logInfo("Garage Door - Blanca", "Timer for 'Garage Door - Blanca' canceled")
        timerGarageDoorLeft.cancel()
    }

    if(timerGarageDoorRight != null) {
        logInfo("Garage Door - Susheel", "Timer for 'Garage Door - Susheel' canceled")
        timerGarageDoorRight.cancel()
    }

end
rule "When manual override for garage door is canceled"
when
    Item manualOverrideGarage received command OFF
then

    if(timerGarageDoorLeft != null) {
        logInfo("Garage Door - Blanca", "Timer for 'Garage Door - Blanca' canceled")
        timerGarageDoorLeft.cancel()
    }

    timerGarageDoorLeft = createTimer(now.plusMinutes(5)) [|
        if (manualOverrideGarage.state != ON && garageDoorLeft.state == ON) {
            logInfo("Garage Door - Blanca", "Left Open")
            notifyMyAndroid('CHANGE_ME', 'Garage Door - Blanca', 'Left open', 1, '', false)
            //squeezeboxSpeak("LivingRoom", "Blanca left garage door open. Blanca left garage door open.")
            //squeezeboxSpeak("Office", "Blanca left garage door open. Blanca left garage door open.")
            sendMail('abc@def.org', 'Blanca left the garage door open', '')
            sendMail('def@abc.org', 'Blanca left the garage door open', '')
            sendCommand(garageDoorLeft, OFF)
            sendMail('abc@def.org', 'Closed the right garage door', '')
            sendMail('def@abc.org', 'Closed the right garage door', '')
        }
    ]

    if(timerGarageDoorRight != null) {
        logInfo("Garage Door - Susheel", "Timer for 'Garage Door - Susheel' canceled")
        timerGarageDoorRight.cancel()
    }

    timerGarageDoorRight = createTimer(now.plusMinutes(5)) [|
        if (manualOverrideGarage.state != ON && garageDoorRight.state == ON) {
            logInfo("Garage Door - Susheel", "Left Open")
            notifyMyAndroid('CHANGE_ME', 'Garage Door - Susheel', 'Left open', 1, '', false)
            //squeezeboxSpeak("LivingRoom", "Susheel left garage door open. Susheel left garage door open.")
            //squeezeboxSpeak("Office", "Susheel left garage door open. Susheel left garage door open.")
            sendMail('abc@def.org', 'Susheel left the garage door open', '')
            sendMail('def@abc.org', 'Susheel left the garage door open', '')
            sendCommand(garageDoorRight, OFF)
            sendMail('abc@def.org', 'Closed the left garage door', '')
            sendMail('def@abc.org', 'Closed the left garage door', '')
        }
    ]

end

rule "When right garage door closes"
when
    Item garageDoorRight changed from ON to OFF
then
    logInfo("GarageDoorRight", "Status update " + garageDoorRight.state.toString)
    //squeezeboxSpeak("LivingRoom", "Right garage door closed. Right garage door closed.")
    notifyMyAndroid('CHANGE_ME', 'Garage Door - Susheel', 'Closed', 1, '', false)
end

rule "When left garage door sensor is armed"
when
   Item garageDoorLeftArmed changed from 0 to 1
then
    logInfo("GarageDoorLeftArmed", "Status update " + garageDoorLeftArmed.state.toString)
    notifyMyAndroid('CHANGE_ME', 'Garage Door - Blanca', 'Armed', 1, '', false);
end

rule "When left garage door sensor is disabled"
when
    Item garageDoorLeftArmed changed from 1 to 0
then
    logInfo("GarageDoorLeftArmed", "Status update " + garageDoorLeftArmed.state.toString)
    notifyMyAndroid('CHANGE_ME', 'Garage Door - Blanca', 'Disabled', 1, '', false);
end

rule "When right garage door sensor is armed"
when
    Item garageDoorRightArmed changed from 0 to 1
then
    logInfo("GarageDoorRightArmed", "Status update " + garageDoorRightArmed.state.toString)
    notifyMyAndroid('CHANGE_ME', 'Garage Door - Susheel', 'Armed', 1, '', false);
end

rule "When right garage door sensor is disabled"
when
    Item garageDoorRightArmed changed from 1 to 0
then
    logInfo("GarageDoorRightArmed", "Status update " + garageDoorRightArmed.state.toString)
    notifyMyAndroid('CHANGE_ME', 'Garage Door - Susheel', 'Disabled', 1, '', false);
end

rule "Periodically check presence"
when
    Time cron "0 * * * * ?"
then
    var year   = now.getYear
    var month  = now.getMonthOfYear
    var day    = now.getDayOfMonth
    if (month < 10) month = '0' + month
    if (day < 10) day = '0' + day
    var datum  = year + "-" + month + "-" + day + " " + sunsetTime.state
    logInfo("Sunset", "datum = " + datum)
    var DateTime sunset = parse(year + "-" + month + "-" + day + "T" + sunsetTime.state)
    var DateTime sunrise = parse(year + "-" + month + "-" + day + "T" + sunriseTime.state)
    if (sunset.isAfterNow() && sunrise.isBeforeNow()) {
        postUpdate("isDark", "OFF")
    } else {
        postUpdate("isDark", "ON")
    }

    logInfo("Thermostat", "Checking state...")

    if (ThermostatUpstairsModeState.state.toString() == 'Idle') {
        postUpdate("ThermostatUpstairsState", "0")
    } else {
        postUpdate("ThermostatUpstairsState", "1")
    }

    logInfo("Presence", "Checking presence...")

    if (Presence.state == ON) {
        logInfo("PresenceCheck", "Presence was ON")
        if (gMobiles.members.filter(s | s.state == ON).size == 0) {
            logInfo("PresenceCheck", "No phone within reach, checking for flapping")
            if (gMobiles.members.filter(s | s.changedSince(now.minusMinutes(5))).size == 0) {
                logInfo("PresenceCheck", "Nobody is at home")
                sendCommand(Presence, OFF)
            }
        } else {
            logInfo("PresenceCheck", "Some phone is within reach, setting presence to ON")
            sendCommand(Presence, ON)
        }
    } else {
        logInfo("PresenceCheck", "Presence was not ON")
        //For initialization. If Presence is undefined or off, although it should be on.
        if (gMobiles.members.filter(s | s.state == ON).size > 0) {
            logInfo("PresenceCheck", "Setting presence to ON")
            sendCommand(Presence, ON)
        } else {
            logInfo("PresenceCheck", "Setting presence to OFF")
            sendCommand(Presence, OFF)
        }
    }

end

rule "Waking up rule"
when
    Time cron "0 0/5 5-21 ? * MON-THU" or
    Time cron "0 0/5 5-22 ? * FRI" or
    Time cron "0 0/5 6-22 ? * SAT" or
    Time cron "0 0/5 6-21 ? * SUN" 
then
    logInfo("Wakeup", "Someone is awake...")
    if (ManualOverride.state != ON) {
        postUpdate("SomeoneIsAwake", "ON")
    } else {
        logInfo("Wakeup", "Running on manual control")
    }
end

rule "Going to bed rule"
when
    Time cron "0 0/5 22-23,0-4 ? * MON-THU" or
    Time cron "0 0/5 23,0-4 ? * FRI" or
    Time cron "0 0/5 23,0-5 ? * SAT" or
    Time cron "0 0/5 22-23,0-5 ? * SUN" 
then
    logInfo("Bedtime", "Everybody is asleep...")
    if (ManualOverride.state != ON) {
        postUpdate("SomeoneIsAwake", "OFF")
    } else {
        logInfo("Bedtime", "Running on manual control")
    }
end

rule SomeoneReachedHome
when
    Item Presence received command ON
then
    logInfo("presence.home", "Someone is home")

    if (ManualOverride.state != ON) {
        logInfo("presence.home", "Running under auto control")
        var Number hourOfDay = now.getHourOfDay()
        var String upstairsModeStatus = ThermostatUpstairsModeStatus.state.toString
        var String officeModeStatus = ThermostatOfficeModeStatus.state.toString

        logInfo("presence.home", "ThermostatUpstairsHeatSetpointWhenOn " + ThermostatUpstairsHeatSetpointWhenOn.state.toString())
        logInfo("presence.home", "ThermostatUpstairsCoolSetpointWhenOn " + ThermostatUpstairsCoolSetpointWhenOn.state.toString())

        var Number upstairsCurrentTemperature = ThermostatUpstairsCurrentTemperature.state as DecimalType
        var Number officeCurrentTemperature = ThermostatOfficeCurrentTemperature.state as DecimalType
        var Number upstairsHeatSetpoint = ThermostatUpstairsHeatCurrentSetpoint.state as DecimalType
        var Number upstairsCoolSetpoint = ThermostatUpstairsCoolCurrentSetpoint.state as DecimalType
        var Number officeHeatSetpoint = ThermostatOfficeHeatCurrentSetpoint.state as DecimalType

        if (upstairsCurrentTemperature < upstairsHeatSetpoint && upstairsModeStatus != "HeatOn") {
            logInfo("thermostat.upstairs", "Turning heat on upstairs since temperature " + upstairsCurrentTemperature + " is below limit " + upstairsHeatSetpoint)
            sendCommand("ThermostatUpstairsModeStatus", "HeatOn")
        } else if (upstairsCurrentTemperature > upstairsCoolSetpoint && upstairsModeStatus != "CoolOn") {
            logInfo("thermostat.upstairs", "Turning cooling on upstairs since temperature " + upstairsCurrentTemperature + " is above limit " + upstairsCoolSetpoint)
            sendCommand("ThermostatUpstairsModeStatus", "CoolOn")
        }

        if (officeCurrentTemperature < officeHeatSetpoint && officeModeStatus != "HeatOn") {
            logInfo("thermostat.office", "Turning heat on office since temperature " + officeCurrentTemperature + " is below limit " + officeHeatSetpoint)
            sendCommand("ThermostatOfficeModeStatus", "HeatOn")
        }

        if (SomeoneIsAwake.state == ON) {
            logInfo("presence", "Someone is awake")
            if (upstairsModeStatus.equalsIgnoreCase("HeatOn")) {
                postUpdate("ThermostatUpstairsSetpoint", ThermostatUpstairsHeatSetpointWhenOn.state.toString())
            } else if (upstairsModeStatus.equalsIgnoreCase("CoolOn")) {
                postUpdate("ThermostatUpstairsSetpoint", ThermostatUpstairsCoolSetpointWhenOn.state.toString())
            } else if (upstairsModeStatus.equalsIgnoreCase("AutoChangeOver")) {
            } else if (upstairsModeStatus.equalsIgnoreCase"Off")) {
            }

            postUpdate("ThermostatOfficeSetpoint", ThermostatOfficeHeatSetpointWhenOn.state.toString())
        } else {
            logInfo("presence", "No one is awake")
            if (upstairsModeStatus.equalsIgnoreCase("HeatOn")) {
                logInfo("presence", "Upstairs was heating")
                postUpdate("ThermostatUpstairsSetpoint", ThermostatUpstairsHeatSetpointWhenOff.state.toString())
            } else if (upstairsModeStatus.equalsIgnoreCase("CoolOn")) {
                logInfo("presence", "Upstairs was cooling")
                postUpdate("ThermostatUpstairsSetpoint", ThermostatUpstairsCoolSetpointWhenOff.state.toString())
            } else if (upstairsModeStatus.equalsIgnoreCase("AutoChangeOver")) {
                logInfo("presence", "Upstairs was auto")
            } else if (upstairsModeStatus.equalsIgnoreCase("Off")) {
                logInfo("presence", "Upstairs was off")
            }

            postUpdate("ThermostatOfficeSetpoint", ThermostatOfficeHeatSetpointWhenOff.state.toString())
        }
    } else {
        logInfo("presence.home", "Running on manual control...")
    }
end

rule EverybodyLeftHome
when
    Item Presence received command OFF
then
    if (ManualOverride.state != ON) {
        logInfo("PresenceOff", "Everybody left home")

        var Number upstairsSetpoint = ThermostatUpstairsSetpoint.state as DecimalType
        var Number upstairsHeatSetpointActual = ThermostatUpstairsHeatCurrentSetpoint.state as DecimalType
        var Number upstairsCoolSetpointActual = ThermostatUpstairsCoolCurrentSetpoint.state as DecimalType
        var String upstairsModeStatus = ThermostatUpstairsModeStatus.state.toString

        logInfo("PresenceOff", "Checking upstairs...")
        logInfo("PresenceOff", "upstairsSetpoint: " + upstairsSetpoint)
        logInfo("PresenceOff", "upstairsHeatSetpointActual: " + upstairsHeatSetpointActual)
        logInfo("PresenceOff", "upstairsCoolSetpointActual: " + upstairsCoolSetpointActual)
        logInfo("PresenceOff", "upstairsModeStatus: " + upstairsModeStatus)

        if (upstairsModeStatus.equalsIgnoreCase("HeatOn")) {
            logInfo("PresenceOff", "Upstairs was heating")
            postUpdate("ThermostatUpstairsSetpoint", ThermostatUpstairsHeatSetpointWhenOff.state.toString())
            postUpdate("ThermostatOfficeSetpoint", ThermostatOfficeHeatSetpointWhenOff.state.toString())
        } else if (upstairsModeStatus.equalsIgnoreCase("CoolOn")) {
            logInfo("PresenceOff", "Upstairs was cooling")
            postUpdate("ThermostatUpstairsSetpoint", ThermostatUpstairsCoolSetpointWhenOff.state.toString())
        } else if (upstairsModeStatus.equalsIgnoreCase("AutoChangeOver")) {
            logInfo("PresenceOff", "Upstairs was in auto mode")
        } else if (upstairsModeStatus.equalsIgnoreCase("Off")) {
            logInfo("PresenceOff", "Upstairs was off")
        }
    } else {
        logInfo("presence.left", "Running on manual control")
    }
end

rule ThermostatUpstairsSetpointUpdate
when
    Item ThermostatUpstairsSetpoint received update
then
    logInfo("Thermostat", "Upstairs Set point updated")

    var Number upstairsSetpoint = ThermostatUpstairsSetpoint.state as DecimalType
    var Number upstairsHeatSetpointActual = ThermostatUpstairsHeatCurrentSetpoint.state as DecimalType
    var Number upstairsCoolSetpointActual = ThermostatUpstairsCoolCurrentSetpoint.state as DecimalType
    var String upstairsModeStatus = ThermostatUpstairsModeStatus.state.toString
    
    logInfo("Upstairs Thermostat", "Received set point update of " + upstairsSetpoint)
    logInfo("Upstairs Thermostat", "Mode: " + upstairsModeStatus)

    if (upstairsModeStatus.equalsIgnoreCase("HeatOn")) {
	logInfo("Upstairs Thermostat", "Heat is on")
        if (upstairsHeatSetpointActual != upstairsSetpoint) {
          logInfo("Thermostat", "Adjusting upstairs heat to " + upstairsSetpoint)
          sendCommand("ThermostatUpstairsHeatCurrentSetpoint", upstairsSetpoint.toString())
        }
    } else if (upstairsModeStatus.equalsIgnoreCase("CoolOn")) {
	logInfo("Upstairs Thermostat", "Cooling is on")
        if (upstairsCoolSetpointActual != upstairsSetpoint) {
          logInfo("Thermostat", "Adjusting upstairs cooling to " + upstairsSetpoint)
          sendCommand("ThermostatUpstairsCoolCurrentSetpoint", upstairsSetpoint.toString())
        }
    } else if (upstairsModeStatus.equalsIgnoreCase("AutoChangeOver")) {
    } else if (upstairsModeStatus.equalsIgnoreCase("Off")) {
    }

end

rule ThermostatOfficeSetpointUpdate
when
    Item ThermostatOfficeSetpoint received update
then
    logInfo("Office Thermostat", "Set point updated")

    var Number officeHeatSetpoint = ThermostatOfficeSetpoint.state as DecimalType
    var Number officeHeatSetpointActual = ThermostatOfficeHeatCurrentSetpoint.state as DecimalType

    if (officeHeatSetpointActual != officeHeatSetpoint ) {
      logInfo("Thermostat", "Adjusting office thermostat since it is off")
      sendCommand("ThermostatOfficeHeatCurrentSetpoint", officeHeatSetpoint.toString())
    }
end

rule ThermostatUpstairsModeStateChange
when 
    Item ThermostatUpstairsModeState received update
then
    if (ThermostatUpstairsModeState.state.toString() == 'Idle') {
      logInfo("Thermostat", "Upstairs turned off")
      postUpdate("ThermostatUpstairsState", "0")
    } else {
      logInfo("Thermostat", "Upstairs turned on")
      postUpdate("ThermostatUpstairsState", "1")
    }
end

rule ThermostatUpstairsModeStatusChange
when 
    Item ThermostatUpstairsModeStatus received update
then
    logInfo("Upstairs Thermostat", "Mode status changed: " + ThermostatUpstairsModeStatus.state.toString())
end

rule MotionSensorLivingRoomTripped
when
    Item MotionSensorLivingRoom changed from CLOSED to OPEN
then
    logInfo("LRMotion", "Motion detected, isDark " + isDark.state)
    if (Wifi_Switch_1.state == OFF && isDark.state == ON) {
      logInfo("LRMotion", "Turning lights on...")
      sendCommand(WinkBulb1, ON)
      sendCommand(WinkBulb1, ON)
    }

    if (SomeoneIsAwake.state == OFF || Presence.state == OFF) {
      logInfo("LRMotion", "Everybody is asleep or nobody is home and motion was detected")
      notifyMyAndroid('CHANGE_ME', 'Living Room', 'Motion Detected', 1, '', false)
    }
end

rule NoMotion
when
    Item MotionSensorLivingRoom changed from OPEN to CLOSED or
    Item MotionSensorOffice changed from OPEN to CLOSED 
then
    logInfo("Motion", "Motion stoppede")
      sendCommand(WinkBulb1, OFF)
      sendCommand(WinkBulb1, OFF)
end

rule MotionDetected
when
    Item MotionSensorLivingRoom received update or
    Item MotionSensorOffice received update
then
    logInfo("Motion", "isDark " + isDark.state)
    logInfo("Motion", "Motion detected Office " + MotionSensorLivingRoom.state)
    logInfo("Motion", "Motion detected LR " + MotionSensorOffice.state)
end

rule MotionSensorOfficeTripped
when
    Item MotionSensorOffice changed from CLOSED to OPEN
then
    logInfo("OfficeMotion", "Motion detected, isDark " + isDark.state)
    if (Wifi_Switch_1.state == OFF && isDark.state == ON) {
      logInfo("OfficeMotion", "Turning lights on...")
	    sendCommand(Wifi_Switch_1, OFF)
      sendCommand(WinkBulb1, ON)
      sendCommand(WinkBulb1, ON)
    }

    if (SomeoneIsAwake.state == OFF || Presence.state == OFF) {
      logInfo("OfficeMotion", "Everybody is asleep or nobody is home and motion was detected")
      notifyMyAndroid('CHANGE_ME', 'Office', 'Motion Detected', 1, '', false)
    }
end

rule DoorSensorOfficeOpened
when
    Item DoorSensorOffice changed from CLOSED to OPEN
then
    logInfo("SunRoom", "Door status changed: " + DoorSensorOffice.state.toString())
    notifyMyAndroid('CHANGE_ME', 'Sun Room Door', DoorSensorOffice.state.toString(), 1, '', false)
end

rule DoorSensorOfficeClosed
when
    Item DoorSensorOffice changed from OPEN to CLOSED
then
    logInfo("SunRoom", "Door status changed: " + DoorSensorOffice.state.toString())
    notifyMyAndroid('CHANGE_ME', 'Sun Room Door', DoorSensorOffice.state.toString(), 1, '', false)
end

rule SmokeDetectorHallway
when
    Item SmokeDetectorHallway changed from OPEN to CLOSED
then
    logInfo("SmokeInHallway", "Hallway smoke detector tripped " + SmokeDetectorHallway.state.toString())
    notifyMyAndroid('CHANGE_ME', 'Hallway', 'Smoke Detected', 1, '', false)
end

rule turnWinkBulb1OnOff
when 
    Item WinkBulb1 received command
then
    logInfo("WinkBulb1", "Command: " + receivedCommand.toString())
    sendHttpPutRequest("http://192.168.0.5/api/commands/index.php", "application/json", 
      "[{\"action\":\"update\",\"id\":\"1\",\"updates\":[{\"id\":\"1\",\"value\":\"" + receivedCommand.toString() + "\"}]}]")
    var switchStatus = sendHttpGetRequest("http://192.168.0.5/api/commands/getStatus.php?deviceId=1")
    logInfo("WinkBulb1Status", switchStatus)
    postUpdate(WinkBulb1, switchStatus.trim())
end

rule turnWinkBulb2OnOff
when 
    Item WinkBulb2 received command
then
    sendHttpPutRequest("http://192.168.0.5/api/commands/index.php", "application/json", 
      "[{\"action\":\"update\",\"id\":\"2\",\"updates\":[{\"id\":\"1\",\"value\":\"" + receivedCommand.toString() + "\"}]}]")
    var switchStatus = sendHttpGetRequest("http://192.168.0.5/api/commands/getStatus.php?deviceId=2")
    logInfo("WinkBulb2Status", switchStatus)
    postUpdate(WinkBulb2, switchStatus.trim())
end

rule turnKankunBulbOnOff
when
    Item Wifi_Switch_1 received command
then
    var switchStatus  = sendHttpGetRequest("http://192.168.0.10/cgi-bin/relay.cgi?state")
    postUpdate(Wifi_Switch_1, switchStatus.trim())
end
